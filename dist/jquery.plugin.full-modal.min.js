'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function (global, $) {
  if (!$) throw new Error('请先加载jquery');

  /**
   * @property
   * @type {number}
   */
  global.__UID__ = 0;

  var parentWindow = global.parent || global;

  var Events = {
    BEFORE_OPEN: 'BEFORE_OPEN',
    BEFORE_CLOSE: 'BEFORE_CLOSE',
    AFTER_OPEN: 'AFTER_OPEN',
    AFTER_CLOSE: 'AFTER_CLOSE'
  };

  var Helpers = function () {
    function Helpers() {
      _classCallCheck(this, Helpers);
    }

    _createClass(Helpers, null, [{
      key: 'uniqueId',
      value: function uniqueId() {
        var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'fm_';

        return '' + prefix + ++global.__UID__;
      }
    }, {
      key: 'isString',
      value: function isString(str) {
        return typeof str === 'string';
      }
    }, {
      key: 'autoprefixer',
      value: function autoprefixer(cssname, value) {
        var prefixes = ['webkit', 'moz', 'ms', 'o'];
        var cssRules = {};

        prefixes.forEach(function (prefix) {
          cssRules['-' + prefix + '-' + cssname] = value;
        });
        return cssRules;
      }
    }, {
      key: 'debounce',
      value: function debounce(fn) {
        var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;

        var t = void 0;
        return function () {
          window.clearTimeout(t);

          t = setTimeout(fn.bind(this), delay);
        };
      }
    }, {
      key: 'isFunction',
      value: function isFunction(fn) {
        return typeof fn === 'function';
      }
    }]);

    return Helpers;
  }();

  var EventEmitter = function () {
    function EventEmitter() {
      _classCallCheck(this, EventEmitter);

      /**
       * @type {{[key:string]:Function[]}}
       */
      this._callbackMapper = {};
    }

    /**
     * 添加事件
     * @param {string} evt 事件名
     * @param {Function} callback 回调 
     */


    _createClass(EventEmitter, [{
      key: 'on',
      value: function on(evt, callback) {
        var callbacks = this._callbackMapper[evt];

        if (Array.isArray(callbacks)) {
          return callbacks.push(callback);
        }
        this._callbackMapper[evt] = [callback];
      }

      /**
       * 移除事件
       * @param {string} evt 事件名
       * @param {Function} [callback] 回调，如不传，则移除所有回调  
       */

    }, {
      key: 'off',
      value: function off(evt, callback) {
        var callbacks = this._callbackMapper[evt];
        if (Helpers.isFunction(callback)) {
          return callbacks.splice(callbacks.indexOf(callback), 1);
        }

        this._callbackMapper[evt] = [];
      }

      /**
       * 触发事件
       * @param {string} evt 事件名
       * @param {any[]} args 需要传递的数据
       */

    }, {
      key: 'emit',
      value: function emit(evt) {
        var _this = this;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var callbacks = this._callbackMapper[evt];
        if (Array.isArray(callbacks)) {
          callbacks.forEach(function (callback) {
            return callback.apply(_this, args);
          });
        }
      }
    }]);

    return EventEmitter;
  }();

  var ModalManager = function () {
    function ModalManager() {
      _classCallCheck(this, ModalManager);

      /**
       * @type {FullModal[]}
       */
      this.modals = [];

      /**
       * @type {FullModal[]}
       */
      this.openedModals = [];
    }

    /**
     * 添加modal
     * @param {FullModal} modal FullModal实例
     */


    _createClass(ModalManager, [{
      key: 'add',
      value: function add(modal) {
        var _this2 = this;

        this.modals.push(modal);

        modal.on('on-open', function (target) {
          _this2.activateModal(target);
          _this2.openedModals.push(target);

          if (_this2.openedModals.length === 1) {
            $('html').addClass('full-modal-open');
          }
        });

        modal.on('on-close', function (target) {
          _this2.openedModals.pop();
          _this2.deactivateModal(target);
          if (!_this2.hasOpenedModal()) {
            $('html').removeClass('full-modal-open');
            Backdrop.singleton.close();
          }
        });
      }

      /**
       * 根据ID获取modal
       * @param {string|number} uid ModalId
       * @returns {FullModal}
       */

    }, {
      key: 'getById',
      value: function getById(uid) {
        return this.modals.find(function (item) {
          return item.uid === uid;
        });
      }

      /**
       * 根据id删除modal
       * @param {string|number} uid ModalId
       */

    }, {
      key: 'removeById',
      value: function removeById(uid) {
        var modal = this.getById(uid);
        var index = this.modals.indexOf(modal);
        this.modals.splice(index, 1);
      }

      /**
       * 当前是否还有打开的modal
       * @returns {boolean}
       */

    }, {
      key: 'hasOpenedModal',
      value: function hasOpenedModal() {
        return this.openedModals.length > 0;
      }

      /**
       * 激活指定Modal，其它modal deactivate
       * @param {FullModal} modal FullModal实例
       */

    }, {
      key: 'activateModal',
      value: function activateModal(modal) {
        modal.activate();
        this.openedModals.forEach(function (item) {
          return item.deactivate();
        });
      }

      /**
       * deactiate 指定modal 自动激活它的前一个modal
       * @param {FullModal} modal FullModal实例
       */

    }, {
      key: 'deactivateModal',
      value: function deactivateModal(modal) {
        modal.deactivate();

        var lastModal = this.openedModals[this.openedModals.length - 1];

        lastModal && lastModal.activate();
      }
    }]);

    return ModalManager;
  }();

  var Backdrop = function (_EventEmitter) {
    _inherits(Backdrop, _EventEmitter);

    /**
     * 
     * @param {string} container 容器
     * @param {number} duration 动画持续时间
     */
    function Backdrop(container, duration) {
      var _ret;

      _classCallCheck(this, Backdrop);

      var _this3 = _possibleConstructorReturn(this, (Backdrop.__proto__ || Object.getPrototypeOf(Backdrop)).call(this));

      if (Backdrop.singleton instanceof Backdrop) return _ret = Backdrop.singleton, _possibleConstructorReturn(_this3, _ret);

      /**
       * @type {boolean}
       */
      _this3.isOpen = false;

      /**
       * @type {number}
       */
      _this3.duration = duration;

      /**
       * @type {JQuery<HTMLELement>}
       */
      _this3.container = $(container);

      _this3.initialize();

      Backdrop.singleton = _this3;
      return _this3;
    }
    /**
     * @type {Backdrop}
     */


    _createClass(Backdrop, [{
      key: 'initialize',
      value: function initialize() {
        var _this4 = this;

        var el = this.$el = $('<div class="ibs-backdrop"></div>');

        this.container.append(el);

        el.on('click', function () {
          _this4.emit('on-backdrop-click', _this4);
        });
      }
    }, {
      key: 'open',
      value: function open() {
        this.$el.fadeIn(this.duration);
        this.isOpen = true;
      }
    }, {
      key: 'close',
      value: function close() {
        this.$el.fadeOut(this.duration);
        this.isOpen = false;
      }
    }]);

    return Backdrop;
  }(EventEmitter);

  Backdrop.singleton = null;

  var FullModal = function (_EventEmitter2) {
    _inherits(FullModal, _EventEmitter2);

    /**
     * create a modal instance
     * @param {JQuery<HTMLElement>} el 
     * @param {Object} option
     * @param {number} option.duration
     * @param {string} option.trigger
     * @param {boolean} option.closeWhenClickBackdrop
     * @param {string} option.origin
     * @param {Function} option.beforeOpen
     * @param {Function} option.beforeClose
     * @param {Function} option.afterOpen
     * @param {Function} option.afterClose
     */
    function FullModal(el, option) {
      _classCallCheck(this, FullModal);

      var _this5 = _possibleConstructorReturn(this, (FullModal.__proto__ || Object.getPrototypeOf(FullModal)).call(this));

      _this5.$el = el;
      _this5.option = option;

      /**
       * @type {JQuery<HTMLElement>}
       */
      _this5.$modalEl = _this5.$el.find('.ibs-full-modal');

      /**
       * @type {JQuery<HTMLElement>}
       */
      _this5.$modalBody = _this5.$el.find('.ibs-modal-body');

      /**
       * @type {boolean}
       */
      _this5.isOpen = false;

      /**
       * @type {boolean}
       */
      _this5.isActivated = false;

      /**
       * @type {boolean}
       */
      _this5.isClosing = false;

      /**
       * @type {Backdrop}
       */
      _this5.backdrop = new Backdrop('body', option.duration + 200);

      /**
       * @readonly
       * @type {string}
       */
      _this5.uid = Helpers.uniqueId();

      _this5.$el.data('uniqueId', _this5.uid);
      _this5.initialize();
      return _this5;
    }

    _createClass(FullModal, [{
      key: 'initialize',
      value: function initialize() {
        var _this6 = this;

        if (this.option.closeWhenClickBackdrop) {
          this.$el.on('click', function () {
            return _this6.onCloseButtonClick();
          });
        }

        this.backdrop.on('on-backdrop-click', function () {
          if (_this6.option.closeWhenClickBackdrop && _this6.isActivated) {
            _this6.close();
          }
        });

        this.$modalEl.on('click', function (e) {
          return e.stopPropagation();
        }).on('click', '.ibs-btn-close', function () {
          return _this6.onCloseButtonClick();
        });

        this.$modalEl.css(Helpers.autoprefixer('transition', 'all ' + this.option.duration + 'ms'));

        if (this.option.trigger) {
          $(this.option.trigger).on('click', function () {
            _this6.open();
          });
        }

        this.setHeightWithWindowInnerHeight();
        window.addEventListener('resize', Helpers.debounce(this.setHeightWithWindowInnerHeight).bind(this));
      }
    }, {
      key: 'setHeightWithWindowInnerHeight',
      value: function setHeightWithWindowInnerHeight() {
        var height = window.innerHeight;
        this.$el.height(height);
      }
    }, {
      key: 'scrollTop',
      value: function scrollTop() {
        var top = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

        this.$modalBody.scrollTop(top);
      }
    }, {
      key: 'onCloseButtonClick',
      value: function onCloseButtonClick() {
        if (this.isClosing) return;
        this.isClosing = true;
        this.option.beforeClose.call(this, this.close.bind(this));
      }
    }, {
      key: 'open',
      value: function open() {
        var _this7 = this;

        var callback = function callback() {
          var onAniationEnd = function onAniationEnd() {
            _this7.option.afterOpen.call(_this7);
            parentWindow.postMessage(Events.AFTER_OPEN, _this7.option.origin);
          };

          var animationRules = {
            background: '#fff'
          };

          parentWindow.postMessage(Events.BEFORE_OPEN, _this7.option.origin);

          _this7.backdrop.open();

          _this7.$el.show();

          _this7.$modalEl.animate(animationRules, _this7.option.duration, onAniationEnd);

          _this7.$modalEl.css({
            transform: 'translateX(0)',
            opacity: 1
          });

          _this7.isOpen = true;
          _this7.emit('on-open', _this7);
        };

        this.option.beforeOpen.call(this, callback);
      }
    }, {
      key: 'close',
      value: function close() {
        var _this8 = this;

        var onAniationEnd = function onAniationEnd() {
          _this8.option.afterClose.call(_this8);

          parentWindow.postMessage(Events.AFTER_CLOSE, _this8.option.origin);

          _this8.$el.hide();
          _this8.emit('on-close', _this8);
        };

        var animationRules = {
          background: 'transparent'
        };

        this.isClosing = false;

        parentWindow.postMessage(Events.BEFORE_CLOSE, this.option.origin);

        this.$modalEl.animate(animationRules, this.option.duration, onAniationEnd);
        this.$modalEl.css({
          transform: 'translateX(30%)',
          opacity: 0
        });

        this.isOpen = false;
      }
    }, {
      key: 'activate',
      value: function activate() {
        this.isActivated = true;
        this.$el.css({
          zIndex: FullModal.ACTIVATED_ZINDEX
        });
      }
    }, {
      key: 'deactivate',
      value: function deactivate() {
        this.isActivated = false;
        this.$el.css({
          zIndex: FullModal.DEACTIVATED_ZINDEX
        });
      }
    }]);

    return FullModal;
  }(EventEmitter);

  FullModal.ACTIVATED_ZINDEX = 102;
  FullModal.DEACTIVATED_ZINDEX = 101;


  var ALLOW_USER_INVOKES = ['open', 'close', 'scrollTop'];

  var defaults = {
    duration: 300,
    trigger: '',
    closeWhenClickBackdrop: true,
    beforeOpen: function beforeOpen(callback) {
      callback();
    },
    beforeClose: function beforeClose(callback) {
      callback();
    },
    origin: '*',
    afterOpen: $.noop,
    afterClose: $.noop
  };

  var modalManager = new ModalManager();

  /**
  * @param {Object} options
  * @param {number} options.duration 动画持续时间
  * @param {string} options.trigger 触发器
  * @param {boolean} options.closeWhenClickBackdrop 点击backdrop时，是否关闭当前modal
  * @param {string} options.origin 向父窗口发送消时，需要的来源域名
  * @param {Function} options.beforeOpen modal打开之前的勾子
  * @param {Function} options.beforeClose modal关闭之前的勾子
  * @param {Function} options.afterOpen modal打开之后的勾子
  * @param {Function} options.afterClose modal关闭之后的勾子
  * @param {any[]} args
  */
  $.fn.fullModal = function (options) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    return this.each(function () {
      var $this = $(this);

      if (Helpers.isString(options)) {
        var uid = $this.data('uniqueId');
        var _modal = modalManager.getById(uid);
        var method = options;
        // console.log('uid:',uid);
        if (_modal) {
          if (ALLOW_USER_INVOKES.indexOf(method) < 0) {
            return console.error('method:"' + method + '" is not allowed invoke on modal instance,expected method are [' + ALLOW_USER_INVOKES.toString() + ']');
          }

          return _modal[method].apply(_modal, args);
        } else {
          return console.error('please initialize modal first');
        }
      }

      var option = $.extend({}, defaults, options);

      var modal = new FullModal($this, option);

      modalManager.add(modal);
    });
  };

  $.fn.fullModal.Events = Events;

  $.fn.fullModal.Defaults = defaults;
})(window, jQuery);
//# sourceMappingURL=jquery.plugin.full-modal.min.js.map
